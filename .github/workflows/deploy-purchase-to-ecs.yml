name: Deploy purchase-api to Amazon ECS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: shop-purchase-api-ecr
  ECS_CLUSTER: shop-ecs-purchase-cluster
  ECS_SERVICE: shop-ecs-purchase-task-service
  CONTAINER_NAME: purchase-api
  TASK_DEFINITION_PATH: .github/ecs/task-definition.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push image
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -t $REGISTRY/${{ env.ECR_REPOSITORY }}:latest .
          docker push $REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $REGISTRY/${{ env.ECR_REPOSITORY }}:latest

      - name: Render task definition
        id: taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_PATH }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
